buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.9'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.diffplug.spotless:spotless-plugin-gradle:$spotless_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

apply plugin: 'kotlin'
apply plugin: "com.diffplug.gradle.spotless"
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'net.minecraftforge.gradle.forge'

// Versions follow this format: MCVERSION-MAJORMOD.MAJORAPI.MINOR.PATCH.
version = "${minecraft_version()}-$mod_version"
group = "com.deflatedpickle.$mod_id"
archivesBaseName = "$mod_id"

sourceCompatibility = targetCompatibility = "$jvm_version"
compileJava {
    sourceCompatibility = targetCompatibility = "$jvm_version"
}

minecraft {
    version = "${minecraft_version()}-$forge_version"
    runDir = "run"

    mappings = "${mappings_channel}_$mappings_version"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

repositories {
    jcenter()
    maven {
        name = "ShadowFacts"
        url = "http://maven.shadowfacts.net/"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "ElytraDev"
        url = 'https://repo.elytradev.com/'
    }
    maven {
        name = "MCModDev"
        url = "https://maven.mcmoddev.com/"
    }
    mavenCentral()
}

dependencies {
    // This is written in Kotlin, using objects
    // For this we require a different loader
    implementation "net.shadowfacts:Forgelin:$forgelin_version"
    // I occasionally move util from my mods to PickleLib to use from other mods
    implementation "picklelib:picklelib:${minecraft_version()}:$picklelib_version"
    // I want a nice editor for my entity models, this format has a nice editor
    implementation "modelloader:modelloader:$modelloader_version"
    // GlassPane provides a way to automatically register things
    // We can probably stop using this at some point, if nothing else from GlassPane is used
    implementation "glasspane:glasspane:${minecraft_version()}:$glasspane_version"

    // implementation 'com.elytradev:mirage:2.0.3-rc3-SNAPSHOT'
    // implementation "ctm:CTM:MC1.12.2:0.3.3.22"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()

        licenseHeader '/* Copyright (c) $YEAR DeflatedPickle under the MIT license */\n\n'
    }

    kotlin {
        ktlint()

        licenseHeader '/* Copyright (c) $YEAR DeflatedPickle under the MIT license */\n\n'
    }
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = 'docs'

    configuration {
        reportUndocumented = true

        targets = ["JVM"]
        platform = "JVM"
    }
}

String minecraft_version() {
    return "$minecraft_major.$minecraft_minor.$minecraft_patch"
}

String minecraft_version_short() {
    return "$minecraft_major.$minecraft_minor"
}
